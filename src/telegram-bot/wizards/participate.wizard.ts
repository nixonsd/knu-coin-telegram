import { UseFilters } from '@nestjs/common';
import { Command, Ctx, Hears, Message, Next, Sender, Wizard, WizardStep } from 'nestjs-telegraf';
import { Markup, Scenes } from 'telegraf';
import { BOT_MAIN_KEYBOARD, PARTICIPATE_WIZARD } from '../constants';
import { TelegrafExceptionFilter } from '../filters';
import { IsInt } from 'class-validator';
import { validate } from '../utils';
import { KnuContractService } from '@knu-contract/knu-contract.service';

const backKeyboard = Markup.keyboard([ '–ù–∞–∑–∞–¥ üö™' ]).oneTime();
const mainKeyboard = Markup.keyboard(BOT_MAIN_KEYBOARD);

class Participation {
  @IsInt()
  public arrangementId!: number;
}

@Wizard(PARTICIPATE_WIZARD)
@UseFilters(TelegrafExceptionFilter)
export class ParticipateWizard {
  constructor(private readonly knuContractService: KnuContractService) {}

  @WizardStep(1)
  async readName(@Ctx() ctx: Scenes.WizardContext) {
    await ctx.replyWithHTML('–í–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ–¥—ñ—ó, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ üö™", —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é –≤—á–∏—Ç–µ–ª—è', backKeyboard);
    ctx.wizard.next();
  }

  @WizardStep(2)
  async nameHandler(@Ctx() ctx: Scenes.WizardContext, @Message('text') text: string, @Next() next: () => Promise<void>) {
    const state = ctx.wizard.state as Participation;
    state.arrangementId = Number(text);
    ctx.wizard.next();
    if (typeof ctx.wizard.step === 'function') {
      await ctx.wizard.step(ctx, next);
    }
  }

  @WizardStep(5)
  async process(@Ctx() ctx: Scenes.WizardContext, @Sender('id') issuer: number) {
    const state = ctx.wizard.state as Participation;
    validate<Participation>(state, Participation);
    const arrangement = await this.knuContractService.getArrangement(Number(state.arrangementId));
    await this.knuContractService.addMember(issuer, issuer, Number(state.arrangementId));
    await ctx.replyWithHTML(
      `–í–∞—Å –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –¥–æ –ø–æ–¥—ñ—ó –ø—ñ–¥ –Ω–∞–∑–≤–æ—é ${arrangement.name} –∑ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º <b>${state.arrangementId}</b>. –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –ø–æ–¥—ñ—é: ${arrangement.reward}<b>KNU</b>`,
      mainKeyboard,
    );
    await ctx.scene.leave();
  }

  @Command('back')
  @Hears('–ù–∞–∑–∞–¥ üö™')
  async onBackCommand(@Ctx() ctx: Scenes.WizardContext) {
    await ctx.replyWithHTML('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!', mainKeyboard);
    await ctx.scene.leave();
  }
}
