import { Markup, Telegraf } from 'telegraf';
import { UseFilters, UseGuards } from '@nestjs/common';
import { Action, Command, Ctx, Hears, InjectBot, Message, Scene, SceneEnter, SceneLeave, Sender } from 'nestjs-telegraf';
import { Context } from '@telegram-bot/interfaces';
import { TeacherGuard } from '@telegram-bot/guards';
import { TelegrafExceptionFilter } from '@telegram-bot/filters';
import { defaultKeyboard } from '@telegram-bot/utils';
import { ALL_COMMANDS, ARRANGEMENT_WIZARD, BOT_TEACHER_KEYBOARD, MINT_WIZARD, TEACHER_COMMANDS, TEACHER_SCENE } from '@telegram-bot/constants';
import { KnuContractService } from '@knu-contract/knu-contract.service';

const arrangementInlineKeyboard = (arrangementId: number) =>  Markup.inlineKeyboard([
  Markup.button.callback('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ üèÅ', `end:${arrangementId}`),
  Markup.button.callback('–í–∏–¥–∞–ª–∏—Ç–∏ ‚ùå', `remove:${arrangementId}`),
]);

const confirmRemovalKeyboard = (arrangementId: number) => Markup.inlineKeyboard([
  Markup.button.callback('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', `confirm_removal:${arrangementId}`),
  Markup.button.callback('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', `cancel:${arrangementId}`),
]);

@Scene(TEACHER_SCENE)
@UseGuards(TeacherGuard)
@UseFilters(TelegrafExceptionFilter)
export class TeacherScene {
  constructor(
    @InjectBot() private readonly bot: Telegraf,
    private readonly knuContractService: KnuContractService,
  ) {}

  @SceneEnter()
  async onSceneEnter(ctx: Context): Promise<void> {
    await this.bot.telegram.setMyCommands(TEACHER_COMMANDS);
    await ctx.replyWithHTML('–í–∏ –≤—ñ–π—à–ª–∏ –≤ –∫—ñ–º–Ω–∞—Ç—É –≤—á–∏—Ç–µ–ª—è, –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è!', Markup.keyboard(BOT_TEACHER_KEYBOARD));
  }

  @SceneLeave()
  async onSceneLeave(ctx: Context): Promise<void> {
    await this.bot.telegram.setMyCommands(ALL_COMMANDS);
    await defaultKeyboard(ctx, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω—É –∫—ñ–º–Ω–∞—Ç—É');
  }

  @Hears('–ù–∞ –≥–æ–ª–æ–≤–Ω—É üö™')
  async onExitMessage(ctx: Context): Promise<void> {
    await ctx.scene.leave();
  }

  @Hears('–ù–∞–∑–∞–¥ üö™')
  async onBackButton(ctx: Context) {
    await ctx.replyWithHTML('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –∫—ñ–º–Ω–∞—Ç—É –≤—á–∏—Ç–µ–ª—è', Markup.keyboard(BOT_TEACHER_KEYBOARD));
  }

  @Hears('–ú–æ—ó –ø–æ–¥—ñ—ó üìÖ')
  async onMyArrangementsMessage(@Ctx() ctx: Context, @Sender('id') issuer: number): Promise<void> {
    const arrangements = await this.knuContractService.getArrangements(issuer);
    arrangements.map(async (value) => {
      await ctx.replyWithHTML(`–ü–æ–¥—ñ—è –∑ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º <b>${value}</b>.`, arrangementInlineKeyboard(value));
    });
  }

  @Action(/^remove:[0-9]+$/)
  async onRemoveAction(@Ctx() ctx: Context): Promise<void> {
    const arrangementId: number = (ctx.callbackQuery as any).data.split(':')[1];
    await ctx.editMessageText('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ø–æ–¥—ñ—é?', confirmRemovalKeyboard(arrangementId));
  }

  @Action(/^cancel:[0-9]+$/)
  async onCancelAction(@Ctx() ctx: Context): Promise<void> {
    const arrangementId: number = (ctx.callbackQuery as any).data.split(':')[1];
    await ctx.editMessageText(`–ü–æ–¥—ñ—è –∑ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º <b>${arrangementId}</b>.`, arrangementInlineKeyboard(arrangementId));
  }

  @Hears('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é ‚ûï')
  async onArrangementMessage(ctx: Context): Promise<void> {
    await ctx.scene.enter(ARRANGEMENT_WIZARD, {}, true);
    await ctx.scene.reenter();
  }

  @Hears('–ù–∞–≥–æ—Ä–æ–¥–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞ üí∞')
  async onMintMessage(ctx: Context): Promise<void> {
    await ctx.scene.enter(MINT_WIZARD, {}, true);
    await ctx.scene.reenter();
  }

  @Command('add')
  async onAddCommand(@Ctx() ctx: Context, @Sender('id') issuer: number, @Message('text') message: string): Promise<string> {
    const [ , userId, amount ] = message.split(' ');
    await this.knuContractService.mint(issuer, Number(userId), Number(amount));

    return `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount}KNU`;
  }

  @Command('leave')
  async onLeaveCommand(ctx: Context): Promise<void> {
    await ctx.scene.leave();
  }
}
